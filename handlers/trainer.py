from aiogram import Router, types
from aiogram import F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import logging

logger = logging.getLogger(__name__)

router = Router()
router.name = 'trainer'

class TrainerStates(StatesGroup):
    waiting_for_answer = State()

questions = [
    {
        "question": "–Ø–∫–µ –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–∞ —î –æ—Å–Ω–æ–≤–Ω–∏–º –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
        "options": [
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏",
            "–°—É–¥–æ–≤–∏–π –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç",
            "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ —É–≥–æ–¥–∏",
            "–ó–≤–∏—á–∞—î–≤–µ –ø—Ä–∞–≤–æ"
        ],
        "correct": 0,
        "explanation": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ —î –æ—Å–Ω–æ–≤–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –ø—Ä–∞–≤–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ —Ç–∞ –º–∞—î –Ω–∞–π–≤–∏—â—É —é—Ä–∏–¥–∏—á–Ω—É —Å–∏–ª—É."
    },
    {
        "question": "–©–æ —Ç–∞–∫–µ —é—Ä–∏–¥–∏—á–Ω–∞ –æ—Å–æ–±–∞?",
        "options": [
            "–§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞ –∑ –ø—Ä–∞–≤–∞–º–∏",
            "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è, —â–æ –º–∞—î –ø—Ä–∞–≤–∞ —ñ –æ–±–æ–≤'—è–∑–∫–∏",
            "–î–µ—Ä–∂–∞–≤–Ω–∏–π –æ—Ä–≥–∞–Ω",
            "–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å"
        ],
        "correct": 1,
        "explanation": "–Æ—Ä–∏–¥–∏—á–Ω–∞ –æ—Å–æ–±–∞ - —Ü–µ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è, —è–∫–∞ –º–∞—î –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–µ –º–∞–π–Ω–æ, –º–æ–∂–µ –≤—ñ–¥ —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–∞–±—É–≤–∞—Ç–∏ –º–∞–π–Ω–æ–≤–∏—Ö —ñ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –Ω–µ–º–∞–π–Ω–æ–≤–∏—Ö –ø—Ä–∞–≤ —ñ –Ω–µ—Å—Ç–∏ –æ–±–æ–≤'—è–∑–∫–∏."
    },
    {
        "question": "–Ø–∫–∏–π –æ—Ä–≥–∞–Ω –∑–¥—ñ–π—Å–Ω—é—î –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–µ —Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
        "options": [
            "–í–µ—Ä—Ö–æ–≤–Ω–∏–π –°—É–¥",
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–∏–π –°—É–¥ –£–∫—Ä–∞—ó–Ω–∏",
            "–í–∏—â–∏–π –∞–Ω—Ç–∏–∫–æ—Ä—É–ø—Ü—ñ–π–Ω–∏–π —Å—É–¥",
            "–í–µ—Ä—Ö–æ–≤–Ω–∞ –†–∞–¥–∞ –£–∫—Ä–∞—ó–Ω–∏"
        ],
        "correct": 1,
        "explanation": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–∏–π –°—É–¥ –£–∫—Ä–∞—ó–Ω–∏ —î —î–¥–∏–Ω–∏–º –æ—Ä–≥–∞–Ω–æ–º –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–æ—ó —é—Ä–∏—Å–¥–∏–∫—Ü—ñ—ó –≤ –£–∫—Ä–∞—ó–Ω—ñ."
    },
    {
        "question": "–Ø–∫–∞ —Ñ–æ—Ä–º–∞ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
        "options": [
            "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞",
            "–ü–∞—Ä–ª–∞–º–µ–Ω—Ç—Å—å–∫–∞ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞",
            "–ó–º—ñ—à–∞–Ω–∞ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞",
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–∞ –º–æ–Ω–∞—Ä—Ö—ñ—è"
        ],
        "correct": 2,
        "explanation": "–£–∫—Ä–∞—ó–Ω–∞ —î –∑–º—ñ—à–∞–Ω–æ—é (–ø–∞—Ä–ª–∞–º–µ–Ω—Ç—Å—å–∫–æ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—å–∫–æ—é) —Ä–µ—Å–ø—É–±–ª—ñ–∫–æ—é."
    },
    {
        "question": "–Ø–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—å –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –£–∫—Ä–∞—ó–Ω–∏?",
        "options": [
            "4 —Ä–æ–∫–∏",
            "5 —Ä–æ–∫—ñ–≤",
            "6 —Ä–æ–∫—ñ–≤",
            "7 —Ä–æ–∫—ñ–≤"
        ],
        "correct": 1,
        "explanation": "–ó–≥—ñ–¥–Ω–æ –∑ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—î—é –£–∫—Ä–∞—ó–Ω–∏, –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –£–∫—Ä–∞—ó–Ω–∏ –æ–±–∏—Ä–∞—î—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–º –Ω–∞ 5 —Ä–æ–∫—ñ–≤."
    },
    {
        "question": "–•—Ç–æ —î –¥–∂–µ—Ä–µ–ª–æ–º –≤–ª–∞–¥–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—î—é?",
        "options": [
            "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç",
            "–í–µ—Ä—Ö–æ–≤–Ω–∞ –†–∞–¥–∞",
            "–ù–∞—Ä–æ–¥ –£–∫—Ä–∞—ó–Ω–∏",
            "–ö–∞–±—ñ–Ω–µ—Ç –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤"
        ],
        "correct": 2,
        "explanation": "–ó–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç–∞—Ç—Ç–µ—é 5 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏, –Ω–æ—Å—ñ—î–º —Å—É–≤–µ—Ä–µ–Ω—ñ—Ç–µ—Ç—É —ñ —î–¥–∏–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –≤–ª–∞–¥–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ —î –Ω–∞—Ä–æ–¥."
    },
    {
        "question": "–ó —è–∫–æ–≥–æ –≤—ñ–∫—É –Ω–∞—Å—Ç–∞—î –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
        "options": [
            "–ó 14 —Ä–æ–∫—ñ–≤",
            "–ó 16 —Ä–æ–∫—ñ–≤",
            "–ó 18 —Ä–æ–∫—ñ–≤",
            "–ó 21 —Ä–æ–∫—É"
        ],
        "correct": 1,
        "explanation": "–ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–∫ –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –≤ –£–∫—Ä–∞—ó–Ω—ñ - 16 —Ä–æ–∫—ñ–≤, —Ö–æ—á–∞ –∑–∞ –¥–µ—è–∫—ñ —Ç—è–∂–∫—ñ –∑–ª–æ—á–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç–∞—î –∑ 14 —Ä–æ–∫—ñ–≤."
    },
    {
        "question": "–Ø–∫–∏–π –æ—Ä–≥–∞–Ω –ø—Ä–∏–π–º–∞—î –∑–∞–∫–æ–Ω–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ?",
        "options": [
            "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –£–∫—Ä–∞—ó–Ω–∏",
            "–í–µ—Ä—Ö–æ–≤–Ω–∞ –†–∞–¥–∞ –£–∫—Ä–∞—ó–Ω–∏",
            "–ö–∞–±—ñ–Ω–µ—Ç –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏",
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–∏–π –°—É–¥ –£–∫—Ä–∞—ó–Ω–∏"
        ],
        "correct": 1,
        "explanation": "–Ñ–¥–∏–Ω–∏–º –æ—Ä–≥–∞–Ω–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞–≤—á–æ—ó –≤–ª–∞–¥–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ —î –ø–∞—Ä–ª–∞–º–µ–Ω—Ç - –í–µ—Ä—Ö–æ–≤–Ω–∞ –†–∞–¥–∞ –£–∫—Ä–∞—ó–Ω–∏."
    }
]

def generate_keyboard(options):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    """
    buttons = [[KeyboardButton(text=option)] for option in options]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def start_training(message: types.Message, state: FSMContext):
    """
    –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    """
    logger.info(f"Starting training for user {message.from_user.id}")
    await state.update_data(current_question=0, correct_answers=0, user_answers=[])
    question = questions[0]
    
    await message.answer(
        f"‚ùì {question['question']}",
        reply_markup=generate_keyboard(question["options"])
    )
    await state.set_state(TrainerStates.waiting_for_answer)
    logger.info(f"Training started for user {message.from_user.id}, first question sent")

@router.message(Command("trainer"))
async def cmd_start_trainer(message: types.Message, state: FSMContext):
    await start_training(message, state)

@router.message(F.text == "–Æ—Ä–∏–¥–∏—á–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä")
async def button_start_trainer(message: types.Message, state: FSMContext):
    await start_training(message, state)

@router.message(TrainerStates.waiting_for_answer)
async def check_answer(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    data = await state.get_data()
    current_question = data.get("current_question", 0)
    correct_answers = data.get("correct_answers", 0)
    user_answers = data.get("user_answers", [])
    question = questions[current_question]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_answers.append({
        "question": question["question"],
        "user_answer": message.text,
        "correct_answer": question["options"][question["correct"]],
        "is_correct": message.text == question["options"][question["correct"]]
    })

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    is_correct = message.text == question["options"][question["correct"]]
    if is_correct:
        correct_answers += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n" + question["explanation"])
    else:
        await message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['options'][question['correct']]}\n\n" + 
            question["explanation"]
        )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    current_question += 1
    await state.update_data(
        current_question=current_question, 
        correct_answers=correct_answers,
        user_answers=user_answers
    )

    if current_question < len(questions):
        next_question = questions[current_question]
        await message.answer(
            f"‚ùì {next_question['question']}",
            reply_markup=generate_keyboard(next_question["options"])
        )
    else:
        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        percentage = (correct_answers / len(questions)) * 100
        summary = [
            f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n",
            f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ {len(questions)}",
            f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {percentage:.1f}%\n",
            "üìù –û–≥–ª—è–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n"
        ]
        
        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        for i, answer in enumerate(user_answers, 1):
            summary.append(f"\n{i}. {answer['question']}")
            summary.append(f"‚ùî –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {answer['user_answer']}")
            if answer['is_correct']:
                summary.append("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                summary.append(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {answer['correct_answer']}")

        summary.append("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /menu, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        await message.answer(
            "\n".join(summary),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="/menu")]],
                resize_keyboard=True
            )
        )
        await state.clear()