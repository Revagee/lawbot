from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.menu import menu_handler
import aiohttp
from bs4 import BeautifulSoup
import logging
import re
from typing import Dict, List, Optional
from datetime import datetime, timedelta

router = Router()
router.name = 'legal_database'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cache settings
article_cache: Dict[str, Dict] = {}
cache_timeout = timedelta(hours=6)

class DatabaseStates(StatesGroup):
    choosing_code = State()
    search_method = State()
    waiting_for_article_number = State()
    waiting_for_keyword = State()

LEGAL_CODES = {
    "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏": {
        "id": "254–∫/96-–≤—Ä",
        "url": "https://zakon.rada.gov.ua/laws/show/254%D0%BA/96-%D0%B2%D1%80/paran4175",
        "print_url": "https://zakon.rada.gov.ua/laws/show/254%D0%BA/96-%D0%B2%D1%80/print"
    },
    "–¶–∏–≤—ñ–ª—å–Ω–∏–π –∫–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏": {
        "id": "435-15",
        "url": "https://zakon.rada.gov.ua/laws/show/435-15",
        "print_url": "https://zakon.rada.gov.ua/laws/show/435-15/print"
    },
    "–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏": {
        "id": "2341-14",
        "url": "https://zakon.rada.gov.ua/laws/show/2341-14",
        "print_url": "https://zakon.rada.gov.ua/laws/show/2341-14/print"
    },
    "–°—ñ–º–µ–π–Ω–∏–π –∫–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏": {
        "id": "2947-14",
        "url": "https://zakon.rada.gov.ua/laws/show/2947-14",
        "print_url": "https://zakon.rada.gov.ua/laws/show/2947-14/print"
    },
    "–ö–æ–¥–µ–∫—Å –∑–∞–∫–æ–Ω—ñ–≤ –ø—Ä–æ –ø—Ä–∞—Ü—é –£–∫—Ä–∞—ó–Ω–∏": {
        "id": "322-08",
        "url": "https://zakon.rada.gov.ua/laws/show/322-08",
        "print_url": "https://zakon.rada.gov.ua/laws/show/322-08/print"
    }
}

async def fetch_page_content(url: str, attempt: int = 0) -> Optional[str]:
    """Fetch page content with retries and proper headers"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'uk-UA,uk;q=0.8,en-US;q=0.5,en;q=0.3',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, timeout=30) as response:
                if response.status == 200:
                    return await response.text()
                elif response.status == 429 and attempt < 3:  # Too Many Requests
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
                    return await fetch_page_content(url, attempt + 1)
                else:
                    logger.error(f"Failed to fetch page: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"Error fetching page: {str(e)}")
        return None

async def parse_articles(html_content: str) -> Dict[str, str]:
    """Parse articles from HTML content with improved accuracy"""
    soup = BeautifulSoup(html_content, 'html.parser')
    articles = {}

    try:
        # Find the main content container
        content = soup.find('div', class_='document-content') or \
                 soup.find('div', class_='txt') or \
                 soup.find('div', id='article')

        if not content:
            logger.error("Could not find content container")
            return {}

        current_article_num = None
        current_article_text = []

        for element in content.find_all(['p', 'div', 'span']):
            text = element.get_text(strip=True)
            if not text:
                continue

            # Check for article header
            article_match = re.match(r'–°—Ç–∞—Ç—Ç—è\s+(\d+(?:[–∞-—è—ñ]|(?:\-\d+)?)?)', text)
            
            if article_match:
                # Save previous article if exists
                if current_article_num and current_article_text:
                    articles[current_article_num] = '\n'.join(current_article_text)
                
                # Start new article
                current_article_num = article_match.group(1)
                current_article_text = [text]
            elif current_article_num:
                # Add text to current article
                current_article_text.append(text)

        # Save last article
        if current_article_num and current_article_text:
            articles[current_article_num] = '\n'.join(current_article_text)

    except Exception as e:
        logger.error(f"Error parsing articles: {str(e)}")
        return {}

    return articles

async def fetch_and_parse_code(code_data: dict) -> Dict[str, str]:
    """Fetch and parse legal code with caching"""
    code_id = code_data['id']
    
    # Check cache
    if code_id in article_cache:
        cache_data = article_cache[code_id]
        if datetime.now() - cache_data['timestamp'] < cache_timeout:
            return cache_data['articles']

    # Try both print and regular URLs
    urls = [code_data['print_url'], code_data['url']]
    
    for url in urls:
        html_content = await fetch_page_content(url)
        if html_content:
            articles = await parse_articles(html_content)
            if articles:
                article_cache[code_id] = {
                    'timestamp': datetime.now(),
                    'articles': articles
                }
                return articles

    return {}

async def search_by_keyword(articles: Dict[str, str], keyword: str) -> List[str]:
    """Search articles by keyword with improved matching"""
    results = []
    search_words = keyword.lower().split()
    
    for article_num, content in articles.items():
        content_lower = content.lower()
        if all(word in content_lower for word in search_words):
            # Format the result
            formatted_content = content
            for word in search_words:
                pattern = re.compile(f'({word})', re.IGNORECASE)
                formatted_content = pattern.sub(r'*\1*', formatted_content)
            
            results.append(f"üìë –°—Ç–∞—Ç—Ç—è {article_num}:\n\n{formatted_content}\n")

    return results

def create_keyboard(items: List[str], row_width: int = 1, include_back: bool = True) -> ReplyKeyboardMarkup:
    """Create a keyboard with given items"""
    keyboard = [[KeyboardButton(text=item)] for item in items]
    if include_back:
        keyboard.append([KeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")])  # Standardized return text
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(Command("database"))
@router.message(F.text == "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö")
async def start_database_search(message: types.Message, state: FSMContext):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ–¥–µ–∫—Å –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
    )
    await state.set_state(DatabaseStates.choosing_code)

@router.message(DatabaseStates.choosing_code)
async def handle_code_selection(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é":
        await state.clear()
        await menu_handler(message)
        return

    if message.text in LEGAL_CODES:
        await state.update_data(selected_code=message.text)
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:",
            reply_markup=create_keyboard(
                ["üî¢ –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–∞—Ç—Ç—ñ", "üîç –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"]
            )
        )
        await state.set_state(DatabaseStates.search_method)
    else:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ–¥–µ–∫—Å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:",
            reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
        )

@router.message(DatabaseStates.search_method)
async def handle_search_method(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é":
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –∫–æ–¥–µ–∫—Å –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
        )
        await state.set_state(DatabaseStates.choosing_code)
        return

    if message.text == "üî¢ –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–∞—Ç—Ç—ñ":
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(DatabaseStates.waiting_for_article_number)
    elif message.text == "üîç –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º":
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–±–æ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(DatabaseStates.waiting_for_keyword)
    else:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
            reply_markup=create_keyboard(
                ["üî¢ –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–∞—Ç—Ç—ñ", "üîç –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"]
            )
        )

@router.message(DatabaseStates.waiting_for_article_number)
async def handle_article_number(message: types.Message, state: FSMContext):
    # Check if input is a valid article number
    if not re.match(r'^\d+$', message.text):
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—Ç—ñ."
        )
        return

    data = await state.get_data()
    code_name = data['selected_code']
    code_data = LEGAL_CODES[code_name]

    # Show loading message
    loading_msg = await message.answer("üîÑ –®—É–∫–∞—é —Å—Ç–∞—Ç—Ç—é...")

    try:
        articles = await fetch_and_parse_code(code_data)
        
        # Try different variations of the article number
        article_found = False
        article_number = message.text
        variations = [
            article_number,
            f"{article_number}-1",
            f"{article_number}–∞",
            f"{article_number}–±"
        ]

        for variation in variations:
            if variation in articles:
                article_found = True
                await loading_msg.delete()
                await message.answer(
                    f"üìë {articles[variation]}",
                    reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
                )
                break

        if not article_found:
            await loading_msg.delete()
            await message.answer(
                "‚ùå –°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
            )

    except Exception as e:
        logger.error(f"Error handling article number: {str(e)}")
        await loading_msg.delete()
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
        )

    await state.set_state(DatabaseStates.choosing_code)

@router.message(DatabaseStates.waiting_for_keyword)
async def handle_keyword(message: types.Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É."
        )
        return

    data = await state.get_data()
    code_name = data['selected_code']
    code_data = LEGAL_CODES[code_name]

    loading_msg = await message.answer("üîÑ –®—É–∫–∞—é —Å—Ç–∞—Ç—Ç—ñ...")

    try:
        articles = await fetch_and_parse_code(code_data)
        results = await search_by_keyword(articles, message.text)

        await loading_msg.delete()

        if results:
            # Split results into chunks to avoid message length limits
            chunk_size = 4000
            current_chunk = []
            current_length = 0

            for result in results:
                if current_length + len(result) > chunk_size:
                    # Send current chunk
                    await message.answer('\n'.join(current_chunk))
                    current_chunk = [result]
                    current_length = len(result)
                else:
                    current_chunk.append(result)
                    current_length += len(result)

            # Send remaining chunk
            if current_chunk:
                await message.answer(
                    '\n'.join(current_chunk),
                    reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
                )
        else:
            await message.answer(
                "‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.",
                reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
            )

    except Exception as e:
        logger.error(f"Error handling keyword search: {str(e)}")
        await loading_msg.delete()
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=create_keyboard(list(LEGAL_CODES.keys()))
        )

    await state.set_state(DatabaseStates.choosing_code)